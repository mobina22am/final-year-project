


https://accounts.spotify.com/authorize?client_id=14d9c89768f742eba1002eee652142c1&response_type=code&redirect_uri=http://localhost:8000/callback&scope=user-read-private user-read-email user-library-read




curl -X POST "https://accounts.spotify.com/api/token" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "grant_type=authorization_code" \
    -d "code=AQBykrKoRuxPOhcy_OL_PffCNLdr_JBJPjR_6B54YTmK75fIpC4ez7hdudqSo6P-8zPbdxtlbDXZGe9Hcv17dooPWb1F0i_uTHks9Rw-xRFPrQOLE3Nn5B3Cal6BucrmkVQkyDPYK7yN-BBmYkZGh0Pe6YffGqqvfZtq22URHHGRKX_fYpFeXXgQhWxMrETH74482qB6uKLd5FKABTnbFapiD-9DxHiLc0lpDHcy-J0W-LEaw_3Wi9E" \
    -d "redirect_uri=http://localhost:8000/callback" \
    -d "client_id=14d9c89768f742eba1002eee652142c1" \
    -d "client_secret=3899528fce97481cb861f4c058fc44fe"





    {"access_token":"BQA0DgNU6Jp0v7zaTrx52Zn2azhiec4S7IW5sc2XJoUIS5Uuf6h8FfNf4ptdllSz5wWSJWLjSPDEIA28Z3HMH45cs9Ubwow-Olg5Sv6b4Ko7oWdHCqjYOB2MLPyO7FjDYWa0TC1fHUok5VvZJLnElQp7rgQSJUs1yv-4IE-PKYJdYareD23LAjE4OqbzC7NlHAjy4jdM0vKbIsa5ekKw_wppG0dQBftmx0Tg_Nvv-Swylg7Rx3IdEclBekNhTkiKVqrc",
    "token_type":"Bearer",
    "expires_in":3600,"
    refresh_token":"AQDL_q4VFCEoM2Q5kiF2JKC_u3ASdZz7XGcQpiM7ATf9njO8ICahaDD3VPah9dQTD2quTcnJUQuPGamuihRCxt2h9H8ikL8Nh0HHwL3vK48HiqZa1m4wM8I1cs-4uikXwWk",
    "scope":"user-library-read user-read-email user-read-private"}% 



    curl -X POST "https://accounts.spotify.com/api/token" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "grant_type=refresh_token" \
    -d "refresh_token=AQDL_q4VFCEoM2Q5kiF2JKC_u3ASdZz7XGcQpiM7ATf9njO8ICahaDD3VPah9dQTD2quTcnJUQuPGamuihRCxt2h9H8ikL8Nh0HHwL3vK48HiqZa1m4wM8I1cs-4uikXwWk" \
    -d "client_id=14d9c89768f742eba1002eee652142c1" \
    -d "client_secret=3899528fce97481cb861f4c058fc44fe"











this is the function to get the audio file from spotify (spotify doesn't provide the audio file):

  // async getSpotifyToken() {
        //     const clientId = '14d9c89768f742eba1002eee652142c1';
        //     const clientSecret = '3899528fce97481cb861f4c058fc44fe';
        //     const refreshToken = 'AQDL_q4VFCEoM2Q5kiF2JKC_u3ASdZz7XGcQpiM7ATf9njO8ICahaDD3VPah9dQTD2quTcnJUQuPGamuihRCxt2h9H8ikL8Nh0HHwL3vK48HiqZa1m4wM8I1cs-4uikXwWk';

        //     const response = await fetch('https://accounts.spotify.com/api/token', {
        //         method: 'POST',
        //         headers: {
        //             'Content-Type': 'application/x-www-form-urlencoded'
        //         },
        //         body: new URLSearchParams({
        //             grant_type: 'refresh_token',
        //             refresh_token: refreshToken,
        //             client_id: clientId,
        //             client_secret: clientSecret
        //         })
        //     });

        //     const data = await response.json();
        //     return data.access_token;
        // },








        if not audioUrl:
                return JsonResponse({"error": "No audio file found"}, status=400)
            
            response = requests.get(audioUrl)

            if response.status_code != 200:
                return JsonResponse({"error": "Failed to download audio"}, status=400)
            
            audioFile = BytesIO(response.content)

            y, sr = librosa.load(audioFile, sr=None)

            spectral = librosa.feature.spectral_centroid(y=y, sr=sr)[0]
            rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)[0]
            
            foundInstruments = []
            if np.mean(spectral) > 5000:
                foundInstruments.append("Electric Guitar")
            if np.mean(rolloff) < 3000:
                foundInstruments.append("Acoustic Guitar")
            if np.mean(spectral) < 2000:
                foundInstruments.append("Piano")

            return JsonResponse({"instruments": foundInstruments})




































if request.method == "POST":
        
        try:
            data = json.loads(request.body.decode("utf-8"))
            songName = data.get("name")
            artistName = data.get("artist")

            if not songName or not artistName:
                return JsonResponse({"error": "Missing song name or artist name"}, status=400)
            
            youtubeLink = searchSongLink(songName, artistName)

            if not youtubeLink: 
                return JsonResponse({"error": "Song not found on YouTube"}, status=404)
            
            songAudioPath = downloadSongAudio(youtubeLink)

            if not songAudioPath:
                return JsonResponse({"error": "Failed to download song audio"}, status=500)
            


            try:
                separator.separate_to_file(songAudioPath, "separatedAudio")

            except subprocess.CalledProcessError:
                return JsonResponse({"error": "Failed to separate instruments"}, status=500)
            

            accompanimentPath = "separatedAudio/accompaniment.wav".format(os.path.basename(songAudioPath).split(".")[0])

            y, sr = librosa.load(accompanimentPath, sr=None)
            spectralCentroids = librosa.feature.spectral_centroid(y=y, sr=sr).mean()

            foundInstruments = []

            if spectralCentroids < 1000:
                foundInstruments.append("Bass", "Drums")

            elif spectralCentroids < 3000:
                foundInstruments.append("Guitar", "Drums")

            else:
                foundInstruments.append("Piano", "Vocals")


            songData = { "name": songName, "artist": artistName, "audio_path": songAudioPath, "instruments": foundInstruments }

            return JsonResponse({"message": "instruments detected", "instruments": foundInstruments, "song": songData}, status=200)
        
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)


    if request.method == "GET":
        if songData:
            return JsonResponse({"instruments": foundInstruments, "song": songData}, status=200)
        
        else:
            return JsonResponse({"error": "No song data detected"}, status=404)

    return JsonResponse({"error": "Invalid request"}, status=405)




















if "bass.wav" in file and spectralCentroids < 900 and zeroCrossingRate < 0.05:
                    foundInstruments.append("Bass")

                if "drums.wav" in file and spectralBandwidth > 2000 and zeroCrossingRate > 0.1:
                    foundInstruments.append("Drums")

                if "piano.wav" in file and spectralCentroids > 3000 and spectralBandwidth > 4000:
                    foundInstruments.append("Piano")

                if "other.wav" in file:
                    if 900 < spectralCentroids < 2500 and 1000 < spectralBandwidth < 4500:
                        foundInstruments.append("Guitar")

                    if 3000 < spectralCentroids < 6000 and 4000 < spectralBandwidth < 7000 and spectralRolloff > 6000:
                        foundInstruments.append("Violin")

































<table>
                    <thead>
                        <tr>
                            <th>Pitch</th>
                            <th>Note</th>
                            <th>Start Time (s)</th>
                            <th>End Time (s)</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(note, index) in notes" :key="index">
                            <td>{{ note.pitch }}</td>
                            <td>{{ note.note }}</td>
                            <td>{{ note.start_time.toFixed(2) }}</td>
                            <td>{{ note.end_time.toFixed(2) }}</td>
                        </tr>
                    </tbody>
                </table>








rhythmic/generatedMusicSheets/Dua Lipa_Houdini_Guitar.pdf



rhythmic/musicapp/views.py